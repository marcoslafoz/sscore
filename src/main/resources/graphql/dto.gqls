type Query {
    getUserById(id: ID): UserDto

    getAcademicCourseListByUserId(userId: ID): [AcademicCourseDto]

    getSubjectListByAcademicCourseId(courseId: ID): [SubjectDto]

    getTasksByUserId(userId: ID): [TaskDto]
    getTasksBySubjectId(subjectId: ID): [TaskDto]
    getTasksByAcademicCourseId(academicCourseId: ID): [TaskDto]
}

type Mutation {
    createUser(user: UserInputDto): UserDto
    setTaskChecked(taskId: ID, checked: Boolean): Boolean
}

input UserInputDto {
    username: String
    name: String
    surname: String
    email: String
    password: String
}

type UserDto {
    id: ID
    username: String
    name: String
    surname: String
    email: String
}

type AcademicCourseDto {
    id: ID
    name: String
    color: String
}

type SubjectDto {
    id: ID
    name: String
    color: String
}

type TaskDto {
    id: ID
    title: String
    description: String
    checked: Boolean
    academicCourse: AcademicCourseDto
    subject: SubjectDto
    date: String
}
